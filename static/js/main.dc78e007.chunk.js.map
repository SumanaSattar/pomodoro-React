{"version":3,"sources":["components/button.component.jsx","context/setting-context.js","components/countdown-animation.component.jsx","components/navbar/navbar.data.jsx","components/navbar/navbar.component.jsx","components/set-pomodoro.component.jsx","components/add-task/task-form.component.jsx","components/add-task/tasks.component.jsx","components/add-task/task-list.component.jsx","pages/add-task.page.jsx","components/play-task.component.jsx","components/pomodoro.component.jsx","components/today-list.component.jsx","pages/today-task.page.js","components/tomorrow-list.component.jsx","pages/tomorrow.page.js","components/unfinished-list.component.jsx","pages/unfinished-task.page.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Button","title","activeClass","clickHandle","className","onClick","SettingContext","createContext","SettingContextProvider","props","initialState","JSON","parse","localStorage","getItem","useState","tasks","setTasks","useEffect","setItem","stringify","date","pomodoro","setPomodoro","executing","setExecuting","startAnimate","setStartAnimate","todayCheck","setTodayCheck","tomorrowCheck","setTomorrowCheck","unfinishedCheck","setUnfinishedCheck","taskPomodoro","setTaskPomodoro","play","setPlay","ariaLabel","setAriaLabel","stopTimer","updateExecute","update","setTimerTime","evaluate","active","work","short","long","Provider","value","settingTaskPomodoro","arr","settingPlay","val","updatedTask","key","filter","num","id","checkingTodayTask","checkingTomorrowTask","checkingUnfinishedTask","setCurrentTimer","activeState","startTimer","pauseTimer","uuidv4","dateObject","getDate","getMonth","getFullYear","aria","remainingTime","minutes","Math","floor","seconds","children","CountDown","timer","animate","useContext","isPlaying","duration","colors","strokeWidth","size","trailColor","onComplete","NavBarData","path","icon","cName","label","NavBar","settingAriaLabel","sidebar","setSidebar","showSidebar","color","to","aria-expanded","aria-label","map","item","index","SetPomodoro","newTimer","setNewTimer","handleChange","e","target","name","parseInt","noValidate","onChange","preventDefault","TaskForm","task","setTask","addTask","formattingDate","Date","startDate","setStartDate","onSubmit","type","placeholder","required","selected","minDate","subDays","inline","withRouter","history","push","TaskList","length","AddTask","PlayTask","Pomodoro","settingBtn","TodayList","today","TodayTask","TomorrowList","todaySplit","split","tomorrowSplit","Number","Tomorrow","UnFinishedList","Unfinished","App","exact","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uNAQeA,EARA,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,MAAMC,EAA6B,EAA7BA,YAAYC,EAAiB,EAAjBA,YAC/B,OACI,8BACI,wBAAQC,UAAWF,EAAaG,QAASF,EAAzC,SAAuDF,O,gDCCtDK,EAAiBC,0BA+IfC,EA5IgB,SAACC,GAAW,IAAD,EAChCC,EAAeC,KAAKC,MAAMC,aAAaC,QAAQ,WAAa,GAD5B,EAEfC,mBAASL,GAFM,mBAE/BM,EAF+B,KAEzBC,EAFyB,KAGtCC,qBAAU,WACNL,aAAaM,QAAQ,QAAQR,KAAKS,UAAUJ,MAC9C,CAACA,IALmC,MAQjBD,mBAAS,IARQ,mBAQ/BM,EAR+B,aAUPN,mBAAS,IAVF,mBAU/BO,EAV+B,KAUtBC,EAVsB,OAWLR,mBAAS,IAXJ,mBAW/BS,EAX+B,KAWrBC,EAXqB,OAYCV,oBAAS,GAZV,mBAY/BW,EAZ+B,KAYlBC,EAZkB,OAaHZ,oBAAS,GAbN,mBAa/Ba,EAb+B,KAapBC,EAboB,OAcGd,oBAAS,GAdZ,mBAc/Be,EAd+B,KAcjBC,EAdiB,OAeOhB,oBAAS,GAfhB,mBAe/BiB,EAf+B,KAefC,EAfe,OAgBClB,mBAAS,IAhBV,mBAgB/BmB,EAhB+B,KAgBlBC,EAhBkB,OAiBfpB,mBAAS,GAjBM,mBAiB/BqB,EAjB+B,KAiB1BC,EAjB0B,OAkBHtB,oBAAS,GAlBN,mBAkB/BuB,EAlB+B,KAkBnBC,EAlBmB,KAkEtC,SAASC,KACLb,GAAgB,GAGpB,IAAMc,GAAe,SAACC,GAClBjB,EAAaiB,GACbC,GAAaD,IAQXC,GAAe,SAACC,GAClB,OAAOA,EAASC,QACZ,IAAK,OACHtB,EAAYqB,EAASE,MACrB,MACF,IAAK,QACDvB,EAAYqB,EAASG,OACrB,MACJ,IAAK,OACDxB,EAAYqB,EAASI,MACrB,MACJ,QACIzB,EAAY,KAWxB,OACI,cAACjB,EAAe2C,SAAhB,CACAC,OAAK,GACDV,aACAC,iBACAnB,WACAE,YACAE,eACAV,QACAY,aACAE,gBACAE,kBACAX,OACAe,OACAF,eACAI,YACAa,oBA/EoB,SAACC,GACzBjB,EAAgBiB,IA+EZC,YA3FY,SAACC,GACjBjB,EAAQiB,IA2FJC,YAlGY,SAACC,GACjBvC,EAASD,EAAMyC,QAAO,SAAAC,GAAG,OAAEA,EAAIC,KAAOH,OAkGlCI,kBA/EkB,WACtB/B,GAAc,IA+EVgC,qBA7EqB,WACzB9B,GAAiB,IA6Eb+B,uBA3EuB,WAC3B7B,GAAmB,IA2Ef8B,gBAzER,SAA0BC,GACtBvB,GAAc,2BAAIjB,GAAL,IACGqB,OAAOmB,KACvBrB,GAAanB,IAuETyC,WApER,WACItC,GAAgB,IAoEZuC,WAjER,WACIvC,GAAgB,KA0CX,0BAuBDa,IAvBC,4BA9BU,WACff,EAAa,IACbF,EAAY,MA4BP,yBArFO,SAACtB,EAAMoB,GACpBJ,EAAS,CAAC,CAAChB,MAAMA,EAAM0D,GAAGQ,cAAS9C,KAAKA,IAAhC,mBAAyCL,QAoF3C,gCAzEc,SAACoD,GAKpB,OAJYA,EAAWC,UAGK,IAFdD,EAAWE,WAEc,IAD1BF,EAAWG,iBAsEnB,kCA/EgB,SAACC,GACpBjC,GAAciC,MA8EX,0BARQ,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACTC,EAAUC,KAAKC,MAAMH,EAAc,IACnCI,EAAUJ,EAAgB,GAEhC,MAAM,GAAN,OAAUC,EAAV,YAAqBG,MAIhB,GADL,SA+BKpE,EAAMqE,YC/GJC,EAzBG,SAAC,GAA4C,IAAD,IAA1CvB,WAA0C,MAAtC,EAAsC,MAApCwB,aAAoC,MAA9B,GAA8B,MAA3BC,eAA2B,SAAdH,EAAc,EAAdA,SACrCtC,EAAW0C,qBAAW5E,GAAtBkC,UACP,OACI,cAAC,uBAAD,CAGQ2C,UAAWF,EACXG,SAAUJ,EACVK,OAAQ,CACR,CAAC,UAAW,KACZ,CAAC,UAAW,KACZ,CAAC,UAAW,MAEZC,YAAa,EACbC,KAAM,IACNC,WAAW,UACXC,WAAa,WACbjD,KAdR,SAiBCsC,GAfYtB,I,uBCVPkC,EAAa,CACvB,CACIzF,MAAM,OACN0F,KAAK,IACLC,KAAK,cAAC,IAAD,IACLC,MAAM,WACNC,MAAM,uBAEV,CACI7F,MAAM,QACN0F,KAAK,SACLC,KAAK,cAAC,IAAD,IACLC,MAAM,WACNC,MAAM,6BAEV,CACI7F,MAAM,WACN0F,KAAK,YACLC,KAAK,cAAC,IAAD,IACLC,MAAM,WACNC,MAAM,gCAEV,CACI7F,MAAM,kBACN0F,KAAK,cACLC,KAAK,cAAC,IAAD,IACLC,MAAM,WACNC,MAAM,kCAEV,CACI7F,MAAM,WACN0F,KAAK,YACLC,KAAK,cAAC,IAAD,IACLC,MAAM,WACNC,MAAM,4BCSCC,G,MArCA,WAAO,IAAD,EACkBb,qBAAW5E,GAAvCgC,EADU,EACVA,UAAU0D,EADA,EACAA,iBADA,EAEYjF,oBAAS,GAFrB,mBAEVkF,EAFU,KAEFC,EAFE,KAGXC,EAAc,WAChBD,GAAYD,GACZD,EAAiB1D,IAErB,OACI,mCACA,eAAC,IAAYW,SAAb,CAAsBC,MAAO,CAACkD,MAAM,WAApC,UACE,qBAAKhG,UAAU,SAAf,SACM,cAAC,IAAD,CAAMiG,GAAG,IAAIC,gBAAehE,EAA5B,SACI,cAAC,IAAD,CAAcjC,QAAS8F,QAGhC,qBAAK/F,UAAW6F,EAAU,kBAAkB,WAA5C,SACI,qBAAI7F,UAAU,iBAAiBC,QAAS8F,EAAxC,UACI,oBAAI/F,UAAU,gBAAd,SACI,cAAC,IAAD,CAAMiG,GAAG,IAAIjG,UAAU,YAAYmG,aAAW,kCAA9C,SACK,cAAC,IAAD,QAGRb,EAAWc,KAAI,SAACC,EAAKC,GAAN,OACZ,oBAAiBtG,UAAWqG,EAAKZ,MAAjC,SACI,eAAC,IAAD,CAAMQ,GAAII,EAAKd,KAAMY,aAAYE,EAAKX,MAAtC,UACKW,EAAKb,KADV,IACgB,+BAAOa,EAAKxG,YAFtByG,kBCwBlBC,EAjDK,WAAO,IAChBlE,EAAiByC,qBAAW5E,GAA5BmC,cADe,EAEW1B,mBAAS,CACtC+B,KAAK,GACLC,MAAM,EACNC,KAAK,GACLH,OAAO,SANW,mBAEf+D,EAFe,KAEJC,EAFI,KAQhBC,EAAa,SAACC,GAAK,IAAD,EACCA,EAAEC,OAAhBC,EADa,EACbA,KAAK/D,EADQ,EACRA,MACZ,OAAQ+D,GACJ,IAAK,OACDJ,EAAY,2BAAID,GAAL,IAAc9D,KAAKoE,SAAShE,MACvC,MACJ,IAAK,aACD2D,EAAY,2BAAID,GAAL,IAAc7D,MAAMmE,SAAShE,MACxC,MACJ,IAAK,YACD2D,EAAY,2BAAID,GAAL,IAAc5D,KAAKkE,SAAShE,QAYnD,OACI,qBAAK9C,UAAU,iBAAf,SACI,uBAAM+G,YAAU,EAAhB,UACI,sBAAK/G,UAAU,cAAf,UACI,wCACA,+CACA,iDAEJ,sBAAKA,UAAU,gBAAf,UACI,uBAAOA,UAAU,QAAQ6G,KAAK,OAAOG,SAAUN,EAAc5D,MAAO0D,EAAS9D,OAC7E,uBAAO1C,UAAU,QAAQ6G,KAAK,aAAaG,SAAUN,EAAc5D,MAAO0D,EAAS7D,QACnF,uBAAO3C,UAAU,QAAQ6G,KAAK,YAAYG,SAAUN,EAAc5D,MAAO0D,EAAS5D,UAErF,cAAC,EAAD,CAAQ/C,MAAM,YAAYE,YAlBlB,SAAC4G,GAClBA,EAAEM,iBACF5E,EAAcmE,Y,gCCuBPU,G,YAhDE,WAAQ,IAAD,EAEEvG,mBAAS,IAFX,mBAEZwG,EAFY,KAEPC,EAFO,OAGatC,qBAAW5E,GAAnCmH,EAHW,EAGXA,QAAQC,EAHG,EAGHA,eAHG,EAcY3G,mBAAS,IAAI4G,MAdzB,mBAcfC,EAde,KAcJC,EAdI,KAgBpB,OACI,uBAAMC,SAZc,SAACf,GACnBA,EAAEM,iBACFI,EAAQF,EAAKG,EAAeE,IAC5BJ,EAAQ,MASqBpH,UAAU,OAAzC,UACI,0CACA,uBACE2H,KAAK,OACLC,YAAY,cACZ9E,MAAOqE,EACPH,SAZe,SAACL,GACtBS,EAAQT,EAAEC,OAAO9D,QAYX+E,UAAQ,EACR7H,UAAU,eAEZ,8BACA,cAAC,IAAD,CACI8H,SAAUN,EACVR,SAAU,SAAA/F,GAAI,OAAIwG,EAAaxG,IAC/B8G,QAASC,kBAAQ,IAAIT,KAAQ,GAC7BU,QAAM,MAKV,qBAAKjI,UAAU,UAAf,SACE,wBAAQ2H,KAAK,SAAS3H,UAAU,mBAAhC,wBCfCkI,eA1BD,SAAC,GAAoB,IAAnBf,EAAkB,EAAlBA,KAAKgB,EAAa,EAAbA,QAAa,EAC2BrD,qBAAW5E,GAA7DiD,EADuB,EACvBA,YAAYF,EADW,EACXA,YAAiBF,GADN,EACCf,KADD,EACMe,qBAQpC,OACI,gCACG,qBAAI/C,UAAU,YAAd,UACK,+BAAOmH,EAAKtH,QACZ,sBAAKG,UAAU,UAAf,UACI,wBAAQA,UAAU,WAAWmG,aAAW,gBAAgBlG,QAAS,kBAAKkD,EAAYgE,EAAK5D,KAAvF,SAA4F,cAAC,IAAD,MAC5F,wBAAQvD,UAAU,WAAWmG,aAAW,cAAclG,QAAS,kBAV3EgD,EAAY,GACZF,EAAoBoE,QACpBgB,EAAQC,KAAK,MAQD,SAAgF,cAAC,IAAD,YAGxF,oBAAIpI,UAAU,YAAd,SACG,+BAAOmH,EAAKlG,SAEf,6BCRGoH,EAdE,WAAO,IACbzH,EAASkE,qBAAW5E,GAApBU,MACP,OACI,8BACKA,EAAM0H,OACC,oBAAItI,UAAU,OAAd,SACKY,EAAMwF,KAAI,SAACe,GACH,OAAO,cAAC,EAAD,CAAOA,KAAMA,GAAWA,EAAK5D,SAEzC,mBAAGvD,UAAU,gBAAb,yBCUbuI,G,OAjBC,WACZ,OACI,8BACI,sBAAKvI,UAAU,iBAAf,UACI,cAAC,EAAD,IACA,qBAAKA,UAAU,mBAAf,SACI,qBAAKA,UAAU,cAAf,SACI,qBAAKA,UAAU,OAAf,SACI,cAAC,EAAD,iBCabwI,EAtBE,WAAO,IAAD,EAC6B1D,qBAAW5E,GAAnD4B,EADW,EACXA,aAAaqB,EADF,EACEA,YAAYF,EADd,EACcA,YAUjC,OACI,sBAAKjD,UAAU,iBAAf,UACI,iCAAO8B,EAAajC,MAApB,OACA,sBAAKG,UAAU,UAAf,UACI,wBAAQA,UAAU,WAAYC,QATrB,WACjBgD,EAAY,GACZE,EAAYrB,EAAayB,KAOmC4C,aAAW,cAA/D,SAA6E,cAAC,IAAD,MAC7E,wBAAQnG,UAAU,WAAYC,QAdvB,WACdgD,EAAY,IAa6CkD,aAAW,oBAA7D,SAAiF,cAAC,IAAD,aCwDlFsC,MAlEf,WAAqB,IAAD,EAC6G3D,qBAAW5E,GAAjIgB,EADS,EACTA,SAASc,EADA,EACAA,KAAKZ,EADL,EACKA,UAAUuC,EADf,EACeA,gBAAgB+E,EAD/B,EAC+BA,WAAWhE,EAD1C,EAC0CA,SAASpD,EADnD,EACmDA,aAAauC,EADhE,EACgEA,WAAWC,EAD3E,EAC2EA,WAAWzB,EADtF,EACsFA,cAAczB,EADpG,EACoGA,MAGpH,OAFAE,qBAAU,kBAAKuB,EAAcjB,KAAa,CAACA,EAAYE,IAGnD,mCACA,sBAAKtB,UAAU,YAAf,UACa,IAATgC,EAAa,cAAC,EAAD,CAAUmF,KAAMvG,IAAW,KAC1C,0CACA,mBAAGZ,UAAU,YAAb,uDACa,IAAXkB,EACE,cAAC,EAAD,IACL,qCACW,qBAAIlB,UAAU,SAAd,UACA,6BAEA,cAAC,EAAD,CACIH,MAAM,OACNC,YAAgC,SAAnBsB,EAAUqB,QAAmB,eAC1C1C,YAAa,kBAAI4D,EAAgB,aAMrC,6BACA,cAAC,EAAD,CACI9D,MAAM,cACNC,YAAgC,UAAnBsB,EAAUqB,QAAoB,eAC3C1C,YAAa,kBAAI4D,EAAgB,cAMrC,6BACA,cAAC,EAAD,CACI9D,MAAM,aACNC,YAAgC,SAAnBsB,EAAUqB,QAAmB,eAC1C1C,YAAa,kBAAI4D,EAAgB,gBAMzC,cAAC,EAAD,CAAQ9D,MAAM,UAAUE,YAAa2I,IAErC,qBAAK1I,UAAU,kBAAf,SACI,qBAAKA,UAAU,eAAf,SACI,cAAC,EAAD,CAA0B4E,MAAO1D,EAAU2D,QAASvD,EAApD,SACCoD,GADexD,OAMxB,sBAAKlB,UAAU,iBAAf,UACI,cAAC,EAAD,CAAQH,MAAM,QAAQC,aAAcwB,GAAgB,SAAUvB,YAAa8D,IAC3E,cAAC,EAAD,CAAQhE,MAAM,QAAQC,YAAawB,GAAgB,SAAUvB,YAAa+D,gBCzC/E6E,EAvBG,WAAO,IAAD,EAC+B7D,qBAAW5E,GAAvDU,EADa,EACbA,MAAQ0G,EADK,EACLA,eAAe9D,EADV,EACUA,kBACxBoF,EAAQtB,EAAe,IAAIC,MAGjC,OACI,8BACG,oBAAIvH,UAAU,OAAd,SACKY,EAAMwF,KAAI,SAACe,GAEH,GAAGyB,IAAQzB,EAAKlG,KAGZ,OADAuC,IACO,cAAC,EAAD,CAAO2D,KAAMA,GAAWA,EAAK5D,YCOjDsF,EAlBG,WAAO,IACdrH,EAAYsD,qBAAW5E,GAAvBsB,WAEP,OACI,8BACI,sBAAKxB,UAAU,YAAf,UACQ,8CACA,qBAAKA,UAAU,cAAf,SACI,sBAAKA,UAAU,OAAf,UACI,cAAC,EAAD,IACIwB,EAAgE,KAAnD,mBAAGxB,UAAU,gBAAb,0CCc9B8I,EA1BM,WAAO,IAAD,EAC+BhE,qBAAW5E,GAA1DU,EADgB,EAChBA,MAAQ0G,EADQ,EACRA,eAAe7D,EADP,EACOA,qBAExBsF,EADQzB,EAAe,IAAIC,MACTyB,MAAM,KAG9B,OACI,8BACG,oBAAIhJ,UAAU,OAAd,SACKY,EAAMwF,KAAI,SAACe,GAEH,IAAM8B,EAAe9B,EAAKlG,KAAK+H,MAAM,KAErC,GAAIE,OAAOD,EAAc,MAAMC,OAAOH,EAAW,IAAI,GAAQG,OAAOD,EAAc,MAAMC,OAAOH,EAAW,KAASG,OAAOD,EAAc,MAAMC,OAAOH,EAAW,IAG5J,OADAtF,IACO,cAAC,EAAD,CAAO0D,KAAMA,GAAWA,EAAK5D,YCIjD4F,EAjBC,WAAO,IACZzH,EAAeoD,qBAAW5E,GAA1BwB,cACP,OACI,8BACI,sBAAK1B,UAAU,YAAf,UACQ,+CACA,qBAAKA,UAAU,cAAf,SACI,sBAAKA,UAAU,OAAf,UACI,cAAC,EAAD,IACI0B,EAAsE,KAAtD,mBAAG1B,UAAU,gBAAb,6CCcjCoJ,EA1BQ,WAAO,IAAD,EAC+BtE,qBAAW5E,GAA5DU,EADkB,EAClBA,MAAQ0G,EADU,EACVA,eAAe5D,EADL,EACKA,uBAExBqF,EADQzB,EAAe,IAAIC,MACTyB,MAAM,KAG9B,OACI,8BACG,oBAAIhJ,UAAU,OAAd,SACKY,EAAMwF,KAAI,SAACe,GAEH,IAAM8B,EAAe9B,EAAKlG,KAAK+H,MAAM,KAErC,GAAIE,OAAOD,EAAc,IAAMC,OAAOH,EAAW,KAAUG,OAAOD,EAAc,KAAOC,OAAOH,EAAW,KAASG,OAAOD,EAAc,KAAKC,OAAOH,EAAW,IAG1J,OADArF,IACO,cAAC,EAAD,CAAOyD,KAAMA,GAAWA,EAAK5D,YCIjD8F,EAjBG,WAAO,IACdzH,EAAiBkD,qBAAW5E,GAA5B0B,gBACP,OACI,8BACI,sBAAK5B,UAAU,YAAf,UACQ,iDACA,qBAAKA,UAAU,cAAf,SACI,sBAAKA,UAAU,OAAf,UACI,cAAC,EAAD,IACI4B,EAAsE,KAApD,mBAAG5B,UAAU,gBAAb,2CCyBnCsJ,MAvBf,WAEE,OACE,mCACI,8BAEA,eAAC,IAAD,WAEM,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAAChE,KAAK,IAAlB,SAAuB,cAAC,EAAD,MACvB,cAAC,IAAD,CAAQA,KAAK,YAAb,SAA0B,cAAC,EAAD,MAC1B,cAAC,IAAD,CAAQA,KAAK,SAAb,SAAuB,cAAC,EAAD,MACvB,cAAC,IAAD,CAAQA,KAAK,YAAb,SAA0B,cAAC,EAAD,MAC1B,cAAC,IAAD,CAAQA,KAAK,cAAb,SAA4B,cAAC,EAAD,iBCnBxBiE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCdQ,IAASC,OACN,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,UACG,cAAC,EAAD,QAMRC,SAASC,eAAe,SF8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAACc,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YEzG5BtB,K","file":"static/js/main.dc78e007.chunk.js","sourcesContent":["const Button = ({title,activeClass,clickHandle}) => {\r\n    return ( \r\n        <div>\r\n            <button className={activeClass} onClick={clickHandle}>{title}</button>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Button;","import { createContext, useState,useEffect } from \"react\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n\r\nexport const SettingContext = createContext();\r\n\r\n\r\nconst SettingContextProvider = (props) => {\r\n    const initialState = JSON.parse(localStorage.getItem(\"tasks\")) || [];\r\n    const [tasks,setTasks]=useState(initialState)\r\n    useEffect(()=>{\r\n        localStorage.setItem(\"tasks\",JSON.stringify(tasks))\r\n    },[tasks]\r\n    )\r\n   \r\n    const [date,setDate]=useState([]);\r\n    \r\n    const [pomodoro,setPomodoro] = useState(0);\r\n    const [executing,setExecuting] = useState({});\r\n    const [startAnimate,setStartAnimate] = useState(false);\r\n    const [todayCheck,setTodayCheck] = useState(false);\r\n    const [tomorrowCheck,setTomorrowCheck] = useState(false);\r\n    const [unfinishedCheck,setUnfinishedCheck] = useState(false);\r\n    const [taskPomodoro,setTaskPomodoro] = useState([])\r\n    const [play,setPlay] = useState(0);\r\n    const [ariaLabel , setAriaLabel] = useState(false);\r\n\r\n    const addTask = (title,date) => {\r\n       setTasks([{title:title,id:uuidv4(),date:date},...tasks])\r\n    }\r\n    const updatedTask = (key) => {\r\n        setTasks(tasks.filter(num=>num.id !== key))\r\n    }\r\n    const settingAriaLabel = (aria) => {\r\n          setAriaLabel(!aria)\r\n    }\r\n    const settingPlay = (val) => {\r\n        setPlay(val);\r\n    }\r\n    const formattingDate = (dateObject) => {\r\n        const date =dateObject.getDate();\r\n        const month = dateObject.getMonth();\r\n        const year = dateObject.getFullYear();\r\n        const formattedDate= date + \"/\"+ month+\"/\" + year\r\n        return formattedDate;\r\n        \r\n    }\r\n    const settingTaskPomodoro = (arr) => {\r\n        setTaskPomodoro(arr)\r\n    }\r\n    const checkingTodayTask = () => {\r\n        setTodayCheck(true);\r\n    }\r\n    const checkingTomorrowTask = () => {\r\n        setTomorrowCheck(true);\r\n    }\r\n    const checkingUnfinishedTask = () => {\r\n        setUnfinishedCheck(true);\r\n    }\r\n    function setCurrentTimer (activeState) {\r\n        updateExecute({...executing,\r\n                        active:activeState})\r\n        setTimerTime(executing)\r\n    }\r\n\r\n    function startTimer() {\r\n        setStartAnimate(true)\r\n    }\r\n\r\n    function pauseTimer() {\r\n        setStartAnimate(false)\r\n    }\r\n\r\n    function stopTimer() {\r\n        setStartAnimate(false)\r\n    }\r\n\r\n    const updateExecute =(update)=>{\r\n        setExecuting(update);\r\n        setTimerTime(update);\r\n    }\r\n\r\n    const settingBtn = () => {\r\n        setExecuting({})\r\n        setPomodoro(0)\r\n    }\r\n\r\n    const setTimerTime = (evaluate) => {\r\n        switch(evaluate.active) {\r\n            case 'work':\r\n              setPomodoro(evaluate.work)\r\n              break;\r\n            case 'short':\r\n                setPomodoro(evaluate.short)\r\n                break;\r\n            case 'long':\r\n                setPomodoro(evaluate.long)\r\n                break;    \r\n            default:\r\n                setPomodoro(0)\r\n                break;\r\n        }\r\n    }\r\n\r\n    const children = ({remainingTime}) => {\r\n        const minutes = Math.floor(remainingTime/60)\r\n        const seconds = remainingTime % 60\r\n\r\n        return `${minutes}:${seconds}`\r\n    }\r\n    return ( \r\n        <SettingContext.Provider \r\n        value={{\r\n            stopTimer,\r\n            updateExecute,\r\n            pomodoro,\r\n            executing,\r\n            startAnimate,\r\n            tasks,\r\n            todayCheck,\r\n            tomorrowCheck,\r\n            unfinishedCheck,\r\n            date,\r\n            play,\r\n            taskPomodoro,\r\n            ariaLabel,\r\n            settingTaskPomodoro,\r\n            settingPlay,\r\n            updatedTask,\r\n            checkingTodayTask,\r\n            checkingTomorrowTask,\r\n            checkingUnfinishedTask,\r\n            setCurrentTimer,\r\n            startTimer,\r\n            pauseTimer,\r\n            stopTimer,\r\n            settingBtn,\r\n            addTask,\r\n            formattingDate,\r\n            settingAriaLabel,\r\n            children\r\n        }}>\r\n            {props.children}\r\n        </SettingContext.Provider>\r\n     );\r\n}\r\n \r\nexport default SettingContextProvider;","import { useContext } from 'react'\r\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\r\nimport { SettingContext } from '../context/setting-context';\r\n\r\n\r\n\r\nconst CountDown = ({key=1,timer=20,animate=true,children}) => {\r\n    const {stopTimer}=useContext(SettingContext)\r\n    return (\r\n        <CountdownCircleTimer\r\n           \r\n                key={key}\r\n                isPlaying={animate}\r\n                duration={timer}\r\n                colors={[\r\n                ['#FFFFFF', 0.33],\r\n                ['#FFFFFF', 0.33],\r\n                ['#FFFFFF', 0.33],\r\n                ]}\r\n                strokeWidth={6}\r\n                size={220}\r\n                trailColor=\"#151932\"\r\n                onComplete={ () => {\r\n                stopTimer()\r\n                }}\r\n      >\r\n        {children}\r\n        </CountdownCircleTimer>\r\n      );\r\n}\r\n \r\nexport default CountDown;","import * as FaAwe from \"react-icons/fa\";\r\nexport  const NavBarData = [\r\n    {\r\n        title:'Home',\r\n        path:'/',\r\n        icon:<FaAwe.FaHome/>,\r\n        cName:'nav-text',\r\n        label:'button to home Page'\r\n    },\r\n    {\r\n        title:'Today',\r\n        path:'/today',\r\n        icon:<FaAwe.FaStar/>,\r\n        cName:'nav-text',\r\n        label:'button to Today Task Page'\r\n    },\r\n    {\r\n        title:'Tomorrow',\r\n        path:'/tomorrow',\r\n        icon:<FaAwe.FaStarHalfAlt/>,\r\n        cName:'nav-text',\r\n        label:'button to Tomorrow Task Page'\r\n    },\r\n    {\r\n        title:'Unfinished Task',\r\n        path:'/unfinished',\r\n        icon:<FaAwe.FaStarHalf/>,\r\n        cName:'nav-text',\r\n        label:'button to unfinished task page'\r\n    },\r\n    {\r\n        title:'Add Task',\r\n        path:'/add-task',\r\n        icon:<FaAwe.FaPlus/>,\r\n        cName:'nav-text',\r\n        label:'button to add task page'\r\n    }\r\n]","import { useContext, useState } from \"react\"\r\nimport * as FaAwe from \"react-icons/fa\"\r\nimport { IconContext } from \"react-icons/lib\"\r\nimport {Link} from 'react-router-dom'\r\nimport {NavBarData} from './navbar.data'\r\nimport {SettingContext} from '../../context/setting-context'\r\nimport './navbar.styles.css'\r\nconst NavBar = () => {\r\n    const {ariaLabel,settingAriaLabel}=useContext(SettingContext);\r\n    const [sidebar,setSidebar] = useState(false)\r\n    const showSidebar = () => {\r\n        setSidebar(!sidebar)\r\n        settingAriaLabel(ariaLabel);\r\n    }\r\n    return ( \r\n        <>\r\n        <IconContext.Provider value={{color:'#060b26'}}>\r\n          <div className='navbar'>\r\n                <Link to=\"#\" aria-expanded={ariaLabel}>\r\n                    <FaAwe.FaBars onClick={showSidebar}/>\r\n                </Link>\r\n           </div>\r\n           <nav className={sidebar ? 'nav-menu active':'nav-menu'}>\r\n               <ul className='nav-menu-items' onClick={showSidebar}>\r\n                   <li className='navbar-toggle'>\r\n                       <Link to='#' className='menu-bars' aria-label=\"close button for navigation bar\">\r\n                            <FaAwe.FaTimes/>\r\n                       </Link>\r\n                   </li>\r\n                   {NavBarData.map((item,index)=>(\r\n                       <li key ={index} className={item.cName}>\r\n                           <Link to={item.path} aria-label={item.label}>\r\n                               {item.icon} <span>{item.title}</span> \r\n                           </Link>\r\n                       </li>\r\n                       \r\n                   ))}\r\n               </ul>\r\n           </nav>\r\n        </IconContext.Provider>\r\n        </>\r\n     );\r\n}\r\n \r\nexport default NavBar;","import Button from './button.component'\r\nimport {useState , useContext} from 'react'\r\nimport {SettingContext} from '../context/setting-context'\r\n\r\n\r\nconst SetPomodoro = () => {\r\n    const {updateExecute} = useContext(SettingContext);\r\n    const [newTimer , setNewTimer] = useState({\r\n        work:30,\r\n        short:5,\r\n        long:30,\r\n        active:'work'\r\n    })\r\n    const handleChange=(e)=>{\r\n        const {name,value} = e.target;\r\n        switch (name) {\r\n            case 'work':\r\n                setNewTimer({...newTimer,work:parseInt(value)});\r\n                break;\r\n            case 'shortBreak':\r\n                setNewTimer({...newTimer,short:parseInt(value)});\r\n                break;\r\n            case 'longBreak':\r\n                setNewTimer({...newTimer,long:parseInt(value)});\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n       \r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        updateExecute(newTimer);\r\n\r\n    }\r\n    return ( \r\n        <div className=\"form-container\">\r\n            <form noValidate>\r\n                <div className=\"input-label\">\r\n                    <span>Work</span>\r\n                    <span>Short Break</span>\r\n                    <span>Long Break</span>\r\n                </div>\r\n                <div className=\"input-wrapper\"> \r\n                    <input className=\"input\" name=\"work\" onChange={handleChange} value={newTimer.work}/>\r\n                    <input className=\"input\" name=\"shortBreak\" onChange={handleChange} value={newTimer.short}/>\r\n                    <input className=\"input\" name=\"longBreak\" onChange={handleChange} value={newTimer.long}/>\r\n                </div>\r\n                 <Button title=\"Set Timer\" clickHandle={handleSubmit}/>\r\n            </form>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default SetPomodoro;","import { useContext,useState} from 'react'\r\nimport {SettingContext} from './../../context/setting-context'\r\nimport DatePicker from \"react-datepicker\";\r\nimport subDays from \"date-fns/subDays\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport './add-task.styles.css'\r\n\r\nconst TaskForm = () =>  {\r\n\r\n      const[task,setTask]=useState('');\r\n      const {addTask,formattingDate}=useContext(SettingContext);\r\n    \r\n      const submitHandler = (e) => {\r\n          e.preventDefault();\r\n          addTask(task,formattingDate(startDate)); \r\n          setTask(\" \")  \r\n        }\r\n\r\n      const  changeHandler = (e) => {\r\n        setTask(e.target.value);       \r\n      }\r\n  const [startDate, setStartDate] = useState(new Date());\r\n \r\n    return ( \r\n        <form onSubmit={submitHandler} className=\"form\">\r\n            <h2>Add Task</h2>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Add Task...\"\r\n              value={task}\r\n              onChange={changeHandler}\r\n              required\r\n              className=\"task-input\"\r\n            />\r\n            <div>\r\n            <DatePicker \r\n                selected={startDate} \r\n                onChange={date => setStartDate(date)} \r\n                minDate={subDays(new Date(), 0)} \r\n                inline\r\n            />\r\n                \r\n            </div>\r\n           \r\n            <div className=\"buttons\">\r\n              <button type=\"submit\" className=\"btn add-task-btn\">\r\n               Add\r\n              </button>\r\n            </div>\r\n            \r\n      </form>\r\n     );\r\n   }\r\n\r\n \r\nexport default TaskForm;","import * as FaAwe from \"react-icons/fa\"\r\nimport {useContext} from 'react'\r\nimport {SettingContext} from '../../context/setting-context'\r\nimport {withRouter} from 'react-router-dom'\r\nconst Tasks = ({task,history}) => {\r\n    const {updatedTask,settingPlay,play,settingTaskPomodoro}=useContext(SettingContext);\r\n \r\n\r\n    const playTask = () => {\r\n        settingPlay(1);\r\n        settingTaskPomodoro(task);\r\n        history.push('/');\r\n    }\r\n    return ( \r\n        <div>\r\n           <li className='list-item'>\r\n                <span>{task.title}</span>\r\n                <div className=\"buttons\">\r\n                    <button className='task-btn' aria-label='delete button' onClick={()=> updatedTask(task.id)}><FaAwe.FaTrashAlt/></button>\r\n                    <button className='task-btn' aria-label='play button' onClick={()=> playTask()}><FaAwe.FaPlayCircle/></button>\r\n                </div>\r\n            </li>\r\n            <li className='list-item'>\r\n               <span>{task.date}</span>\r\n            </li>\r\n            <hr></hr>  \r\n        </div>\r\n     );\r\n}\r\n \r\nexport default withRouter(Tasks);","import {useContext} from 'react';\r\nimport {SettingContext} from './../../context/setting-context'\r\nimport Tasks from './tasks.component'\r\nconst TaskList = () => {\r\n    const {tasks} = useContext(SettingContext);\r\n    return ( \r\n        <div>\r\n            {tasks.length ?\r\n                    <ul className=\"list\">\r\n                        {tasks.map((task)=> \r\n                                {return <Tasks task={task} key={task.id}/>}\r\n                            )}\r\n                    </ul> : <p className='no-task-color'> No Task</p>}\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default TaskList;","import TaskForm from \"../components/add-task/task-form.component\"\r\nimport TaskList from \"../components/add-task/task-list.component\"\r\nimport './add-task.page.css'\r\n\r\n\r\nconst AddTask = () => {\r\n    return ( \r\n        <div>\r\n            <div className=\"container-task\">\r\n                <TaskForm/>\r\n                <div className='container center'>\r\n                    <div className=\"app-wrapper\">\r\n                        <div className=\"main\">\r\n                            <TaskList/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n           \r\n        </div> );\r\n}\r\n \r\nexport default AddTask;","import {useContext} from 'react'\r\nimport * as FaAwe from \"react-icons/fa\"\r\nimport { SettingContext } from '../context/setting-context';\r\n\r\nconst PlayTask = () => {\r\n     const {taskPomodoro,updatedTask,settingPlay} = useContext(SettingContext)\r\n     const closeTask = () => {\r\n         settingPlay(0);\r\n     }\r\n\r\n     const doneHandled = ()=> {\r\n        settingPlay(0);\r\n        updatedTask(taskPomodoro.id)\r\n     }\r\n     \r\n    return ( \r\n        <div className=\"play-container\">\r\n            <span>{taskPomodoro.title} </span>\r\n            <div className=\"buttons\">\r\n                <button className='task-btn'  onClick={doneHandled} aria-label=\"done button\"><FaAwe.FaCheck/></button>\r\n                <button className='task-btn'  onClick={closeTask} aria-label=\"close task button\"><FaAwe.FaTimes/></button>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default PlayTask;","import { SettingContext } from '../context/setting-context';\r\nimport Button from './button.component';\r\nimport CountDown from './countdown-animation.component';\r\nimport React, { useContext, useEffect } from 'react';\r\nimport SetPomodoro from './set-pomodoro.component';\r\nimport PlayTask from './play-task.component';\r\n\r\n\r\n\r\n\r\nfunction Pomodoro() {\r\n    const {pomodoro,play,executing,setCurrentTimer,settingBtn,children,startAnimate,startTimer,pauseTimer,updateExecute,tasks} = useContext(SettingContext)\r\n    useEffect(()=> updateExecute(executing) , [executing , startAnimate])\r\n\r\n    return ( \r\n        <>\r\n        <div className='container'>\r\n          {(play === 1 ? <PlayTask task={tasks}/> : null)}\r\n          <h1>Pomodoro</h1>\r\n          <p className='whiteFont'>Focus on being productive instead of busy</p>\r\n          { pomodoro===0 ?\r\n              <SetPomodoro/> :\r\n         <>\r\n                    <ul className=\"labels\">\r\n                    <li>\r\n                    \r\n                    <Button \r\n                        title='work'\r\n                        activeClass={executing.active==='work' && 'active-label'}\r\n                        clickHandle={()=>setCurrentTimer('work')}\r\n                    />\r\n                    </li>\r\n                \r\n\r\n                \r\n                    <li>\r\n                    <Button \r\n                        title='Short Break'\r\n                        activeClass={executing.active==='short' && 'active-label'}\r\n                        clickHandle={()=>setCurrentTimer('short')}\r\n                    />\r\n                    </li>\r\n            \r\n\r\n            \r\n                    <li>\r\n                    <Button \r\n                        title='Long Break'\r\n                        activeClass={executing.active==='long' && 'active-label'}\r\n                        clickHandle={()=>setCurrentTimer('long')}\r\n                    />\r\n                    </li>\r\n                \r\n                </ul>\r\n\r\n                <Button title='Setting' clickHandle={settingBtn}/>\r\n\r\n                <div className='timer-container'>\r\n                    <div className='time-wrapper'>\r\n                        <CountDown key={pomodoro} timer={pomodoro} animate={startAnimate}>\r\n                        {children}\r\n                    </CountDown>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className='button-wrapper'>\r\n                    <Button title='Start' activeClass={!startAnimate && 'active'} clickHandle={startTimer}/>\r\n                    <Button title='Pause' activeClass={startAnimate && 'active'} clickHandle={pauseTimer}/>\r\n                </div>\r\n            </>}\r\n        </div>       \r\n        </>\r\n\r\n     );\r\n}\r\n \r\nexport default Pomodoro;","import {useContext} from 'react';\r\nimport {SettingContext} from '../context/setting-context'\r\nimport Tasks from './add-task/tasks.component'\r\nconst TodayList = () => {\r\n    const {tasks , formattingDate,checkingTodayTask} = useContext(SettingContext);\r\n    const today = formattingDate(new Date())\r\n    \r\n\r\n    return ( \r\n        <div>\r\n           <ul className=\"list\">\r\n               {tasks.map((task)=> \r\n                    {\r\n                        if(today===task.date){\r\n                           \r\n                            checkingTodayTask();\r\n                            return <Tasks task={task} key={task.id}/>\r\n                        }\r\n                        \r\n                    }\r\n                )}\r\n           </ul> \r\n        </div>\r\n     );\r\n}\r\n \r\nexport default TodayList;","import TodayList from \"../components/today-list.component\"\r\nimport './add-task.page';\r\nimport {SettingContext} from '../context/setting-context'\r\nimport { useContext } from \"react\";\r\n\r\nconst TodayTask = () => {\r\n    const {todayCheck}=useContext(SettingContext);\r\n    \r\n    return ( \r\n        <div>\r\n            <div className='container'>\r\n                    <h1>Today's Task</h1>\r\n                    <div className=\"app-wrapper\">\r\n                        <div className=\"main\">\r\n                            <TodayList/>\r\n                            { (!todayCheck)? <p className='no-task-color'>no task for today</p>:null}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default TodayTask;","import {useContext} from 'react';\r\nimport {SettingContext} from '../context/setting-context'\r\nimport Tasks from './add-task/tasks.component'\r\nconst TomorrowList = () => {\r\n    const {tasks , formattingDate,checkingTomorrowTask} = useContext(SettingContext);\r\n    const today = formattingDate(new Date())\r\n    const todaySplit =today.split('/');\r\n  \r\n\r\n    return ( \r\n        <div>\r\n           <ul className=\"list\">\r\n               {tasks.map((task)=> \r\n                    {\r\n                        const tomorrowSplit =task.date.split('/');\r\n\r\n                        if((Number(tomorrowSplit[0])===Number(todaySplit[0])+1 ) && (Number(tomorrowSplit[1])===Number(todaySplit[1])) && (Number(tomorrowSplit[2])===Number(todaySplit[2])))\r\n                        {\r\n                            checkingTomorrowTask();\r\n                            return <Tasks task={task} key={task.id}/>\r\n                        }\r\n                        \r\n                    }\r\n                )}\r\n           </ul> \r\n        </div>\r\n     );\r\n}\r\n \r\nexport default TomorrowList;","import TodayList from \"../components/today-list.component\"\r\nimport './add-task.page';\r\nimport {SettingContext} from '../context/setting-context'\r\nimport { useContext } from \"react\";\r\nimport TomorrowList from \"../components/tomorrow-list.component\";\r\n\r\nconst Tomorrow= () => {\r\n    const {tomorrowCheck}=useContext(SettingContext);\r\n    return ( \r\n        <div>\r\n            <div className='container'>\r\n                    <h1>Tomorrow Task</h1>\r\n                    <div className=\"app-wrapper\">\r\n                        <div className=\"main\">\r\n                            <TomorrowList/>\r\n                            { (!tomorrowCheck)? <p className='no-task-color'>no task for tomorrow</p>:null}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Tomorrow;","import {useContext} from 'react';\r\nimport {SettingContext} from '../context/setting-context'\r\nimport Tasks from './add-task/tasks.component'\r\nconst UnFinishedList = () => {\r\n    const {tasks , formattingDate,checkingUnfinishedTask} = useContext(SettingContext);\r\n    const today = formattingDate(new Date())\r\n    const todaySplit =today.split('/');\r\n  \r\n\r\n    return ( \r\n        <div>\r\n           <ul className=\"list\">\r\n               {tasks.map((task)=> \r\n                    {\r\n                        const tomorrowSplit =task.date.split('/');\r\n\r\n                        if((Number(tomorrowSplit[0]) < Number(todaySplit[0] )) && (Number(tomorrowSplit[1]) <= Number(todaySplit[1])) && (Number(tomorrowSplit[2])<=Number(todaySplit[2])))\r\n                        {\r\n                            checkingUnfinishedTask();\r\n                            return <Tasks task={task} key={task.id}/>\r\n                        }\r\n                        \r\n                    }\r\n                )}\r\n           </ul> \r\n        </div>\r\n     );\r\n}\r\n \r\nexport default UnFinishedList;","import './add-task.page';\r\nimport {SettingContext} from '../context/setting-context'\r\nimport { useContext } from \"react\";\r\nimport UnFinishedList from '../components/unfinished-list.component';\r\n\r\n\r\nconst Unfinished= () => {\r\n    const {unfinishedCheck}=useContext(SettingContext);\r\n    return ( \r\n        <div> \r\n            <div className='container'>\r\n                    <h1>Unfinished Task</h1>\r\n                    <div className=\"app-wrapper\">\r\n                        <div className=\"main\">\r\n                            <UnFinishedList/>\r\n                            { (!unfinishedCheck)? <p className='no-task-color'>no task unfinished</p>:null}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Unfinished;","import React, { useContext, useEffect } from 'react';\r\nimport './App.css';\r\nimport Button from './components/button.component';\r\nimport CountDown from './components/countdown-animation.component';\r\nimport NavBar from './components/navbar/navbar.component';\r\nimport SetPomodoro from './components/set-pomodoro.component';\r\nimport { SettingContext } from './context/setting-context';\r\nimport {BrowserRouter as Router,Switch,Route} from 'react-router-dom'\r\nimport AddTask from './pages/add-task.page';\r\nimport Pomodoro from './components/pomodoro.component';\r\nimport SettingContextProvider from './context/setting-context';\r\nimport TodayTask from './pages/today-task.page';\r\nimport Tomorrow from './pages/tomorrow.page';\r\nimport Unfinished from './pages/unfinished-task.page';\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <>\r\n        <div>\r\n        \r\n        <Router>\r\n             \r\n              <NavBar/>\r\n              <Switch>\r\n                <Route exact path='/' ><Pomodoro/></Route>\r\n                <Route  path='/add-task' ><AddTask/></Route>\r\n                <Route  path='/today' ><TodayTask/></Route>\r\n                <Route  path='/tomorrow' ><Tomorrow/></Route>\r\n                <Route  path='/unfinished' ><Unfinished/></Route>\r\n              </Switch>\r\n          </Router>\r\n        </div>\r\n        \r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport SettingContextProvider from './context/setting-context';\r\n\r\nReactDOM.render(\r\n   <React.StrictMode>\r\n       <SettingContextProvider>\r\n          <App />\r\n       </SettingContextProvider>\r\n      \r\n  </React.StrictMode>,\r\n  \r\n  \r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}